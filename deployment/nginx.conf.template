# reference: https://docs.gunicorn.org/en/20.1.0/deploy.html

# this file (nginx.conf.template) is a tmplate file. 
# please run envsubst before use it as nginx.conf
# required env before running envsubst
# - STATIC_FILE_PATH
# - BACKEND_SERVER 

worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  
  # 'use epoll;' to enable for Linux 2.6+
  use epoll;

  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream api_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    # server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server ${BACKEND_SERVER} fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
  }

  server {
    # 'listen 80;' works for every system
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80 deferred;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name 172.21.148.198;

    keepalive_timeout 65;

    # path for static files
    root ${STATIC_FILE_PATH};

    location / {
      # special config for react-router based frontend
      # check static file, if not found, use index.html
      try_files $uri /index.html;
    }

    # proxy all request with URL path "/api/..."
    location /api {
      proxy_pass http://api_server;
    }

  }
}